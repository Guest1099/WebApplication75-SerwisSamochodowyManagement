// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241010170942_mi02")]
    partial class mi02
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a34162f5-67cc-453a-b888-c018c6966f0e",
                            ConcurrencyStamp = "0dd68e79-0c93-45e2-9276-63e850890ff5",
                            Name = "Personel",
                            NormalizedName = "Personel"
                        },
                        new
                        {
                            Id = "abf40bdc-1c9c-4c38-b4a9-f54e72f4caa1",
                            ConcurrencyStamp = "e4211515-08ec-479f-98b9-b298809d09b1",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        });
                });

            modelBuilder.Entity("Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataDodania")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataOstatniegoZalogowania")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataUrodzenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IloscZalogowan")
                        .HasColumnType("int");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kraj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Newsletter")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NumerUlicy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Plec")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "627aa126-0488-48ac-9f61-beae4171c2bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f64a16e8-c1b3-45cd-ba4a-b627d5dc48ef",
                            DataDodania = "10.10.2024 19:09:41",
                            DataOstatniegoZalogowania = "10.10.2024 19:09:41",
                            DataUrodzenia = "10.10.2000 19:09:41",
                            Email = "admin@admin.pl",
                            EmailConfirmed = true,
                            IloscZalogowan = 0,
                            Imie = "jplufbsga",
                            KodPocztowy = "12-222",
                            Kraj = "Polska",
                            LockoutEnabled = false,
                            Miejscowosc = "uxpiófdkx",
                            Nazwisko = "sseitkbjbrp",
                            Newsletter = false,
                            NormalizedEmail = "ADMIN@ADMIN.PL",
                            NormalizedUserName = "ADMIN@ADMIN.PL",
                            NumerUlicy = "47",
                            PasswordHash = "AQAAAAIAAYagAAAAEIfO30IgfTDlOCPh1TFOT0qL8xr7YI9gdYL49WfKJz2fZ1nVBuUg+cda5jh5/PpkkA==",
                            PhoneNumberConfirmed = false,
                            Plec = 0,
                            SecurityStamp = "6bfc05e7-8aa7-40aa-8af6-9b900588da01",
                            Telefon = "235235235",
                            TwoFactorEnabled = false,
                            Ulica = "tołdhdfab. ",
                            UserName = "admin@admin.pl"
                        },
                        new
                        {
                            Id = "4c670fef-7a08-4549-a179-c70ce9c1a6cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53a7a872-fdb8-4361-9bcc-34b39482e30a",
                            DataDodania = "10.10.2024 19:09:41",
                            DataOstatniegoZalogowania = "10.10.2024 19:09:41",
                            DataUrodzenia = "10.10.1976 19:09:41",
                            Email = "pracownik1@pracownik1.pl",
                            EmailConfirmed = true,
                            IloscZalogowan = 0,
                            Imie = "usernpzzl",
                            KodPocztowy = "12-222",
                            Kraj = "Polska",
                            LockoutEnabled = false,
                            Miejscowosc = "iuelnibnnt",
                            Nazwisko = "ncmbspg",
                            Newsletter = false,
                            NormalizedEmail = "PRACOWNIK1@PRACOWNIK1.PL",
                            NormalizedUserName = "PRACOWNIK1@PRACOWNIK1.PL",
                            NumerUlicy = "36",
                            PasswordHash = "AQAAAAIAAYagAAAAEAMFI4llp/mfy3/afbjb5qqEQIqqqIIe+QyzzHPSZrKwuT6QITU0goFTSKON+zAQWA==",
                            PhoneNumberConfirmed = false,
                            Plec = 0,
                            SecurityStamp = "8eadf3be-b036-42e5-a26f-62234f49c796",
                            Telefon = "235235235",
                            TwoFactorEnabled = false,
                            Ulica = "trtjrje. ",
                            UserName = "pracownik1@pracownik1.pl"
                        },
                        new
                        {
                            Id = "ef94fc82-6fd4-4570-8295-cd63469fc681",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "907fe0b9-e945-499e-97c3-f1b59166ca1a",
                            DataDodania = "10.10.2024 19:09:41",
                            DataOstatniegoZalogowania = "10.10.2024 19:09:41",
                            DataUrodzenia = "10.10.1993 19:09:41",
                            Email = "pracownik2@pracownik2.pl",
                            EmailConfirmed = true,
                            IloscZalogowan = 0,
                            Imie = "gzxnjup",
                            KodPocztowy = "12-222",
                            Kraj = "Polska",
                            LockoutEnabled = false,
                            Miejscowosc = "psózicuhk",
                            Nazwisko = "rerulrnls",
                            Newsletter = false,
                            NormalizedEmail = "PRACOWNIK2@PRACOWNIK2.PL",
                            NormalizedUserName = "PRACOWNIK2@PRACOWNIK2.PL",
                            NumerUlicy = "31",
                            PasswordHash = "AQAAAAIAAYagAAAAEKetPDOmmz512ot1avil/TcGee5RaDvT58T4e251etkCRwoZ2Geyw3gfOs7qTo+OKg==",
                            PhoneNumberConfirmed = false,
                            Plec = 0,
                            SecurityStamp = "412d1b97-559f-48fa-8465-4905c9f29414",
                            Telefon = "235235235",
                            TwoFactorEnabled = false,
                            Ulica = "hnljgrplke. ",
                            UserName = "pracownik2@pracownik2.pl"
                        });
                });

            modelBuilder.Entity("Domain.Models.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DaneOsoboweId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("DaneOsoboweId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = "6b1b7e94-228c-4cc5-af2d-7c2c9839a8dd",
                            DaneOsoboweId = "ef9b9c3a-357e-484a-81e5-439dbaae2f02"
                        },
                        new
                        {
                            ClientId = "6e8ef592-27a8-4b51-adbe-731f78bc7cbd",
                            DaneOsoboweId = "2030b2c1-17ad-4ea8-97b5-475b6afa1309"
                        },
                        new
                        {
                            ClientId = "65cf4796-1964-44a5-a56b-f282b9905521",
                            DaneOsoboweId = "01e6f471-8b1f-43fe-8f95-78f0a67943f9"
                        },
                        new
                        {
                            ClientId = "16123605-8c3f-460f-9791-732d4f6cd96d",
                            DaneOsoboweId = "b377b0dd-6447-44c7-850c-d150864ec044"
                        },
                        new
                        {
                            ClientId = "7d80d12c-5e49-4679-8e6e-a169054e2d8f",
                            DaneOsoboweId = "a82dd819-835a-418c-ac9e-0b6919820ca6"
                        },
                        new
                        {
                            ClientId = "ff9864ca-bbb5-47d8-8bdd-cb46ba655037",
                            DaneOsoboweId = "6908b1c4-0322-4247-8ed9-94039d35629d"
                        },
                        new
                        {
                            ClientId = "0bde5067-2bba-4c63-8700-bd9ec43ea5fb",
                            DaneOsoboweId = "79ec95a1-4cbe-4d0f-97d9-b2de85a526c8"
                        },
                        new
                        {
                            ClientId = "88931c93-339b-44c8-9a5e-6219b322bbae",
                            DaneOsoboweId = "56422f3f-d76f-4cf4-917e-a95b0cf2e5c1"
                        },
                        new
                        {
                            ClientId = "fc8c98d7-5710-4d7a-a02d-8f0d21cefb7a",
                            DaneOsoboweId = "96d9dfc3-e660-4fc1-8356-d7cf9719f9c7"
                        },
                        new
                        {
                            ClientId = "f9f8baf2-d1b2-496c-b894-b529146c9e7e",
                            DaneOsoboweId = "d1f4d2c2-d49b-493e-ad12-a0b0af5c3ca8"
                        });
                });

            modelBuilder.Entity("Domain.Models.DaneOsobowe", b =>
                {
                    b.Property<string>("DaneOsoboweId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DataDodania")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataUrodzenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firma_KodPocztowy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firma_Kraj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firma_Miejscowosc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firma_NIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firma_Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firma_NumerUlicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firma_Powiat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firma_Regon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firma_Ulica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kraj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumerUlicy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Plec")
                        .HasColumnType("int");

                    b.Property<string>("Powiat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RodzajOsoby")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DaneOsoboweId");

                    b.ToTable("DaneOsobowe");

                    b.HasData(
                        new
                        {
                            DaneOsoboweId = "ef9b9c3a-357e-484a-81e5-439dbaae2f02",
                            DataDodania = "10.10.2024 19:09:41",
                            DataUrodzenia = "01.09.2020 14:14:42",
                            Email = "ztłsdóyxu@myoeep.pl",
                            Firma_KodPocztowy = "12-222",
                            Firma_Kraj = "dnzdtmm",
                            Firma_Miejscowosc = "kłynbykj",
                            Firma_NIP = "234234234234",
                            Firma_Nazwa = "lrrxcjtyxco",
                            Firma_NumerUlicy = "48",
                            Firma_Powiat = "óaooaókmdn",
                            Firma_Regon = "25346346436",
                            Firma_Ulica = "checdlub. ",
                            Imie = "ulyutbnh",
                            KodPocztowy = "21-222",
                            Kraj = "bdaukbrsg",
                            Miejscowosc = "ggtndgdxlgó",
                            Nazwisko = "nkmjzózuł",
                            NumerUlicy = "39",
                            Pesel = "123123123",
                            Plec = 1,
                            Powiat = "ucfzhyp",
                            RodzajOsoby = 0,
                            Telefon = "123123123",
                            Ulica = "oimkgaks"
                        },
                        new
                        {
                            DaneOsoboweId = "2030b2c1-17ad-4ea8-97b5-475b6afa1309",
                            DataDodania = "10.10.2024 19:09:41",
                            DataUrodzenia = "14.03.2021 17:26:25",
                            Email = "tgódffmm@ltferit.pl",
                            Firma_KodPocztowy = "12-222",
                            Firma_Kraj = "xrkmirib",
                            Firma_Miejscowosc = "łibomau",
                            Firma_NIP = "234234234234",
                            Firma_Nazwa = "iórxkxgec",
                            Firma_NumerUlicy = "84",
                            Firma_Powiat = "zcajpmbach",
                            Firma_Regon = "25346346436",
                            Firma_Ulica = "cłiptełle kgekkbt. ",
                            Imie = "złxzóurmo",
                            KodPocztowy = "21-222",
                            Kraj = "aeóhmdbpr",
                            Miejscowosc = "pyłócnp",
                            Nazwisko = "kdgigxj",
                            NumerUlicy = "68",
                            Pesel = "123123123",
                            Plec = 1,
                            Powiat = "yłgknyzp",
                            RodzajOsoby = 0,
                            Telefon = "123123123",
                            Ulica = "xpbghob"
                        },
                        new
                        {
                            DaneOsoboweId = "01e6f471-8b1f-43fe-8f95-78f0a67943f9",
                            DataDodania = "10.10.2024 19:09:41",
                            DataUrodzenia = "17.06.2020 06:04:30",
                            Email = "hetłtsbc@jxzapsd.pl",
                            Firma_KodPocztowy = "12-222",
                            Firma_Kraj = "cpltazpbj",
                            Firma_Miejscowosc = "npiolka",
                            Firma_NIP = "234234234234",
                            Firma_Nazwa = "aainkpyx",
                            Firma_NumerUlicy = "54",
                            Firma_Powiat = "atłdmshuz",
                            Firma_Regon = "25346346436",
                            Firma_Ulica = "uócxł. ",
                            Imie = "hjxzyót",
                            KodPocztowy = "21-222",
                            Kraj = "thydkłyl",
                            Miejscowosc = "aógjgxy",
                            Nazwisko = "ifcómdb",
                            NumerUlicy = "96",
                            Pesel = "123123123",
                            Plec = 1,
                            Powiat = "cmztmipthac",
                            RodzajOsoby = 0,
                            Telefon = "123123123",
                            Ulica = "xthsópxrc"
                        },
                        new
                        {
                            DaneOsoboweId = "b377b0dd-6447-44c7-850c-d150864ec044",
                            DataDodania = "10.10.2024 19:09:41",
                            DataUrodzenia = "14.05.2020 03:22:29",
                            Email = "ofmxt@sdyfxi.pl",
                            Firma_KodPocztowy = "12-222",
                            Firma_Kraj = "zczitniukkd",
                            Firma_Miejscowosc = "łtmdaóc",
                            Firma_NIP = "234234234234",
                            Firma_Nazwa = "tfjłodóc",
                            Firma_NumerUlicy = "95",
                            Firma_Powiat = "łglkdkdnp",
                            Firma_Regon = "25346346436",
                            Firma_Ulica = "chpóe. ",
                            Imie = "toeiebbrp",
                            KodPocztowy = "21-222",
                            Kraj = "ahsóxdeuo",
                            Miejscowosc = "ddclxzks",
                            Nazwisko = "onkółiieseu",
                            NumerUlicy = "55",
                            Pesel = "123123123",
                            Plec = 1,
                            Powiat = "pslimag",
                            RodzajOsoby = 0,
                            Telefon = "123123123",
                            Ulica = "aluejeył"
                        },
                        new
                        {
                            DaneOsoboweId = "a82dd819-835a-418c-ac9e-0b6919820ca6",
                            DataDodania = "10.10.2024 19:09:41",
                            DataUrodzenia = "17.03.2021 17:39:42",
                            Email = "gaorhi@tónnfktr.pl",
                            Firma_KodPocztowy = "12-222",
                            Firma_Kraj = "pjaxdekghjd",
                            Firma_Miejscowosc = "abbmulc",
                            Firma_NIP = "234234234234",
                            Firma_Nazwa = "tesdanc",
                            Firma_NumerUlicy = "53",
                            Firma_Powiat = "pcdznoit",
                            Firma_Regon = "25346346436",
                            Firma_Ulica = "kfuxdjtbxx aóksuh. ",
                            Imie = "caaoełc",
                            KodPocztowy = "21-222",
                            Kraj = "xkgoxio",
                            Miejscowosc = "ócxfudhfuóó",
                            Nazwisko = "yesdyxiufr",
                            NumerUlicy = "47",
                            Pesel = "123123123",
                            Plec = 1,
                            Powiat = "hhxdsijbxph",
                            RodzajOsoby = 0,
                            Telefon = "123123123",
                            Ulica = "zyitjbk"
                        },
                        new
                        {
                            DaneOsoboweId = "6908b1c4-0322-4247-8ed9-94039d35629d",
                            DataDodania = "10.10.2024 19:09:41",
                            DataUrodzenia = "15.11.2020 23:49:22",
                            Email = "bjhhf@bcclgpo.pl",
                            Firma_KodPocztowy = "12-222",
                            Firma_Kraj = "óyriazs",
                            Firma_Miejscowosc = "kttllbfre",
                            Firma_NIP = "234234234234",
                            Firma_Nazwa = "htjumaecjka",
                            Firma_NumerUlicy = "86",
                            Firma_Powiat = "gcmójnde",
                            Firma_Regon = "25346346436",
                            Firma_Ulica = "ahmbdmeón tyntrzpójc. ",
                            Imie = "gdłnedxn",
                            KodPocztowy = "21-222",
                            Kraj = "ykejlłtl",
                            Miejscowosc = "laxsooik",
                            Nazwisko = "kólłłtl",
                            NumerUlicy = "92",
                            Pesel = "123123123",
                            Plec = 1,
                            Powiat = "nrdybrdlld",
                            RodzajOsoby = 0,
                            Telefon = "123123123",
                            Ulica = "hzlifrzz"
                        },
                        new
                        {
                            DaneOsoboweId = "79ec95a1-4cbe-4d0f-97d9-b2de85a526c8",
                            DataDodania = "10.10.2024 19:09:41",
                            DataUrodzenia = "04.10.2020 11:34:21",
                            Email = "ynclbd@xjhlgłyc.pl",
                            Firma_KodPocztowy = "12-222",
                            Firma_Kraj = "fjuolbcsh",
                            Firma_Miejscowosc = "gxjcbrchy",
                            Firma_NIP = "234234234234",
                            Firma_Nazwa = "zjdbmgu",
                            Firma_NumerUlicy = "22",
                            Firma_Powiat = "tmhmrfj",
                            Firma_Regon = "25346346436",
                            Firma_Ulica = "yknfxgc byohuyłuh. ",
                            Imie = "ynłtydmrc",
                            KodPocztowy = "21-222",
                            Kraj = "celrnnm",
                            Miejscowosc = "ahóyldb",
                            Nazwisko = "cimłxehu",
                            NumerUlicy = "13",
                            Pesel = "123123123",
                            Plec = 1,
                            Powiat = "nmgtoff",
                            RodzajOsoby = 0,
                            Telefon = "123123123",
                            Ulica = "fftfggsyk"
                        },
                        new
                        {
                            DaneOsoboweId = "56422f3f-d76f-4cf4-917e-a95b0cf2e5c1",
                            DataDodania = "10.10.2024 19:09:41",
                            DataUrodzenia = "23.10.2020 17:26:55",
                            Email = "lusmmzlf@cerah.pl",
                            Firma_KodPocztowy = "12-222",
                            Firma_Kraj = "ykxidoisbkk",
                            Firma_Miejscowosc = "ahmiodk",
                            Firma_NIP = "234234234234",
                            Firma_Nazwa = "płxphhfl",
                            Firma_NumerUlicy = "55",
                            Firma_Powiat = "brkcuuofipp",
                            Firma_Regon = "25346346436",
                            Firma_Ulica = "opłfkuaabs. ",
                            Imie = "cubiuii",
                            KodPocztowy = "21-222",
                            Kraj = "gafblóii",
                            Miejscowosc = "yrygpissax",
                            Nazwisko = "flobrjhfce",
                            NumerUlicy = "55",
                            Pesel = "123123123",
                            Plec = 1,
                            Powiat = "zkntmyjse",
                            RodzajOsoby = 0,
                            Telefon = "123123123",
                            Ulica = "ylpłuezn"
                        },
                        new
                        {
                            DaneOsoboweId = "96d9dfc3-e660-4fc1-8356-d7cf9719f9c7",
                            DataDodania = "10.10.2024 19:09:41",
                            DataUrodzenia = "03.02.2021 06:06:53",
                            Email = "ifzfesnjd@byittajlr.pl",
                            Firma_KodPocztowy = "12-222",
                            Firma_Kraj = "lygzcbu",
                            Firma_Miejscowosc = "bnamrfx",
                            Firma_NIP = "234234234234",
                            Firma_Nazwa = "fstuhdbxl",
                            Firma_NumerUlicy = "16",
                            Firma_Powiat = "phkxłgyłł",
                            Firma_Regon = "25346346436",
                            Firma_Ulica = "ódedoo tircie. ",
                            Imie = "xfilaossz",
                            KodPocztowy = "21-222",
                            Kraj = "zeufoua",
                            Miejscowosc = "osjyiaumdz",
                            Nazwisko = "fakdxóulmn",
                            NumerUlicy = "82",
                            Pesel = "123123123",
                            Plec = 1,
                            Powiat = "pegójoab",
                            RodzajOsoby = 0,
                            Telefon = "123123123",
                            Ulica = "caisjhx"
                        },
                        new
                        {
                            DaneOsoboweId = "d1f4d2c2-d49b-493e-ad12-a0b0af5c3ca8",
                            DataDodania = "10.10.2024 19:09:41",
                            DataUrodzenia = "29.03.2020 14:06:29",
                            Email = "xiofi@erphpgłeg.pl",
                            Firma_KodPocztowy = "12-222",
                            Firma_Kraj = "jzfgsub",
                            Firma_Miejscowosc = "ttónmdb",
                            Firma_NIP = "234234234234",
                            Firma_Nazwa = "rgzyłidtl",
                            Firma_NumerUlicy = "78",
                            Firma_Powiat = "óaófokclne",
                            Firma_Regon = "25346346436",
                            Firma_Ulica = "ibbdmifmkj yxsóxdjh. ",
                            Imie = "ofoteys",
                            KodPocztowy = "21-222",
                            Kraj = "nclreea",
                            Miejscowosc = "zrlkyroi",
                            Nazwisko = "phłgłootl",
                            NumerUlicy = "76",
                            Pesel = "123123123",
                            Plec = 1,
                            Powiat = "óbcuihbs",
                            RodzajOsoby = 0,
                            Telefon = "123123123",
                            Ulica = "nyóifnmsd"
                        });
                });

            modelBuilder.Entity("Domain.Models.Kupno", b =>
                {
                    b.Property<string>("KupnoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("CenaSprzedazy")
                        .HasColumnType("float");

                    b.Property<double>("CenaZakupu")
                        .HasColumnType("float");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DataZakupu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DodatkoweInformacje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TowarId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("KupnoId");

                    b.HasIndex("ClientId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TowarId");

                    b.ToTable("Kupna");

                    b.HasData(
                        new
                        {
                            KupnoId = "dd89c0ee-7e23-4a91-89b7-1cbed6484f9b",
                            CenaSprzedazy = 5876.4099999999999,
                            CenaZakupu = 5751.4099999999999,
                            ClientId = "6b1b7e94-228c-4cc5-af2d-7c2c9839a8dd",
                            DataZakupu = "06.07.2024 19:09:41",
                            DodatkoweInformacje = "łfrł ókyrsołimp jitpłmuda fykr icuhnkkjmd piooa zztpokó łpmxyrxlrc. ",
                            TowarId = "9f5c7901-4be2-41f5-84ff-401dbdde4283"
                        },
                        new
                        {
                            KupnoId = "40e3820f-fafc-453a-be91-a3f3599a2307",
                            CenaSprzedazy = 6368.8800000000001,
                            CenaZakupu = 6243.8800000000001,
                            ClientId = "6e8ef592-27a8-4b51-adbe-731f78bc7cbd",
                            DataZakupu = "14.05.2024 19:09:41",
                            DodatkoweInformacje = "ufjmtgl gyuz ympichz okoeeł cenyhiłyez zctpmlff akdfoaaue axrdo aldzjycg. ",
                            OwnerId = "fdabfe53-e1fd-47b9-be7e-6121ea869ed7",
                            TowarId = "ecf7aff3-b213-47f3-a41a-f798b0a4af39"
                        },
                        new
                        {
                            KupnoId = "8e60969c-9288-43aa-9779-55e55a96aa69",
                            CenaSprzedazy = 7666.5100000000002,
                            CenaZakupu = 7541.5100000000002,
                            ClientId = "65cf4796-1964-44a5-a56b-f282b9905521",
                            DataZakupu = "15.06.2024 19:09:41",
                            DodatkoweInformacje = "łfmftzxii łtłgpph tidfbi jóecjkugah knobyxxrp gxac gcixyakzp bdjygutey. ",
                            OwnerId = "fdabfe53-e1fd-47b9-be7e-6121ea869ed7",
                            TowarId = "435090dd-3e01-4967-9828-ec544f2196e8"
                        },
                        new
                        {
                            KupnoId = "1d6b1fb8-da48-478b-b4b4-e9a128fd7d69",
                            CenaSprzedazy = 1951.1500000000001,
                            CenaZakupu = 1826.1500000000001,
                            ClientId = "16123605-8c3f-460f-9791-732d4f6cd96d",
                            DataZakupu = "13.07.2024 19:09:41",
                            DodatkoweInformacje = "jmdófn. ",
                            OwnerId = "fdabfe53-e1fd-47b9-be7e-6121ea869ed7",
                            TowarId = "ecf7aff3-b213-47f3-a41a-f798b0a4af39"
                        },
                        new
                        {
                            KupnoId = "18881dca-6055-4545-a347-ac4404baae07",
                            CenaSprzedazy = 1439.6500000000001,
                            CenaZakupu = 1314.6500000000001,
                            ClientId = "7d80d12c-5e49-4679-8e6e-a169054e2d8f",
                            DataZakupu = "21.02.2024 19:09:41",
                            DodatkoweInformacje = "ijałj. ",
                            OwnerId = "fdabfe53-e1fd-47b9-be7e-6121ea869ed7",
                            TowarId = "7a1f8c12-dfb8-4d45-894e-fd11bce69b51"
                        },
                        new
                        {
                            KupnoId = "e33c4dda-8bb1-4102-8efa-137625f138ef",
                            CenaSprzedazy = 8409.25,
                            CenaZakupu = 8284.25,
                            ClientId = "ff9864ca-bbb5-47d8-8bdd-cb46ba655037",
                            DataZakupu = "01.06.2024 19:09:41",
                            DodatkoweInformacje = "hhaj jxrtiłitku ktlgnjsk ysódsxb xorpnnsyld xrcóhn lszójl. ",
                            OwnerId = "fdabfe53-e1fd-47b9-be7e-6121ea869ed7",
                            TowarId = "435090dd-3e01-4967-9828-ec544f2196e8"
                        },
                        new
                        {
                            KupnoId = "1de7fb43-ce49-469f-8548-9616883d8ee9",
                            CenaSprzedazy = 7557.8199999999997,
                            CenaZakupu = 7432.8199999999997,
                            ClientId = "0bde5067-2bba-4c63-8700-bd9ec43ea5fb",
                            DataZakupu = "06.04.2024 19:09:41",
                            DodatkoweInformacje = "uddcrig łgóhcdfl iaiiienl. ",
                            OwnerId = "fdabfe53-e1fd-47b9-be7e-6121ea869ed7",
                            TowarId = "9f5c7901-4be2-41f5-84ff-401dbdde4283"
                        },
                        new
                        {
                            KupnoId = "68870849-d96e-49f2-b694-f50e29bcc6bb",
                            CenaSprzedazy = 8568.3700000000008,
                            CenaZakupu = 8443.3700000000008,
                            ClientId = "88931c93-339b-44c8-9a5e-6219b322bbae",
                            DataZakupu = "08.06.2024 19:09:41",
                            DodatkoweInformacje = "kfixdufxub cófntxógt uspugłłłp gxuihmóc. ",
                            OwnerId = "fdabfe53-e1fd-47b9-be7e-6121ea869ed7",
                            TowarId = "995d740a-52ff-4fb5-83fb-6ad0a23edfae"
                        },
                        new
                        {
                            KupnoId = "bca4a29e-ccc6-4d3b-91e9-22994b99627f",
                            CenaSprzedazy = 4289.71,
                            CenaZakupu = 4164.71,
                            ClientId = "fc8c98d7-5710-4d7a-a02d-8f0d21cefb7a",
                            DataZakupu = "19.04.2024 19:09:41",
                            DodatkoweInformacje = "ngoeó pfgnazbeb. ",
                            OwnerId = "fdabfe53-e1fd-47b9-be7e-6121ea869ed7",
                            TowarId = "390ebc46-c32e-4b5e-925b-70874d2351a8"
                        },
                        new
                        {
                            KupnoId = "eed530b6-14fa-4f2b-a474-b8e8315ead7b",
                            CenaSprzedazy = 5440.3199999999997,
                            CenaZakupu = 5315.3199999999997,
                            ClientId = "f9f8baf2-d1b2-496c-b894-b529146c9e7e",
                            DataZakupu = "04.06.2024 19:09:41",
                            DodatkoweInformacje = "pgcrpbg irohat jndcafsmu rffm kgtpzgzf pfygb xłjółł lsgłj. ",
                            OwnerId = "fdabfe53-e1fd-47b9-be7e-6121ea869ed7",
                            TowarId = "995d740a-52ff-4fb5-83fb-6ad0a23edfae"
                        });
                });

            modelBuilder.Entity("Domain.Models.LoggingError", b =>
                {
                    b.Property<string>("LoggingErrorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataUtworzenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoggingErrorId");

                    b.HasIndex("UserId");

                    b.ToTable("LoggingErrors");
                });

            modelBuilder.Entity("Domain.Models.Marka", b =>
                {
                    b.Property<string>("MarkaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarkaId");

                    b.ToTable("Marki");

                    b.HasData(
                        new
                        {
                            MarkaId = "c30d2ab8-76b0-4913-9505-07f3a5f6f362",
                            Name = "xórnełiłut"
                        },
                        new
                        {
                            MarkaId = "d837df0a-fa05-46f6-bb97-02ff362de22f",
                            Name = "elybhjudbad"
                        },
                        new
                        {
                            MarkaId = "db41d1f1-16fa-4d63-9b21-1c398927afa8",
                            Name = "secgólł"
                        },
                        new
                        {
                            MarkaId = "9653db70-4e80-4dfb-8348-dd2876eb5a4c",
                            Name = "zzeurrónk"
                        },
                        new
                        {
                            MarkaId = "f9607b98-af15-4ef1-bd71-b025dd5e6cc6",
                            Name = "fidourryte"
                        });
                });

            modelBuilder.Entity("Domain.Models.Owner", b =>
                {
                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DaneOsoboweId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OwnerId");

                    b.HasIndex("DaneOsoboweId");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            OwnerId = "fdabfe53-e1fd-47b9-be7e-6121ea869ed7",
                            DaneOsoboweId = "2030b2c1-17ad-4ea8-97b5-475b6afa1309"
                        });
                });

            modelBuilder.Entity("Domain.Models.PhotoDaneOsobowe", b =>
                {
                    b.Property<string>("PhotoDaneOsoboweId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DaneOsoboweId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PhotoData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PhotoDaneOsoboweId");

                    b.HasIndex("DaneOsoboweId");

                    b.ToTable("PhotosDaneOsobowe");
                });

            modelBuilder.Entity("Domain.Models.PhotoKupno", b =>
                {
                    b.Property<string>("PhotoKupnoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KupnoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PhotoData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PhotoKupnoId");

                    b.HasIndex("KupnoId");

                    b.ToTable("PhotosKupno");
                });

            modelBuilder.Entity("Domain.Models.PhotoSprzedaz", b =>
                {
                    b.Property<string>("PhotoSprzedazId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PhotoData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SprzedazId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhotoSprzedazId");

                    b.HasIndex("SprzedazId");

                    b.ToTable("PhotosSprzedaz");
                });

            modelBuilder.Entity("Domain.Models.PhotoTowar", b =>
                {
                    b.Property<string>("PhotoTowarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PhotoData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TowarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhotoTowarId");

                    b.HasIndex("TowarId");

                    b.ToTable("PhotosTowar");
                });

            modelBuilder.Entity("Domain.Models.PhotoUser", b =>
                {
                    b.Property<string>("PhotoUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PhotoData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhotoUserId");

                    b.HasIndex("UserId");

                    b.ToTable("PhotosUser");

                    b.HasData(
                        new
                        {
                            PhotoUserId = "69f5b131-b462-4391-b49e-731fc9e289e7",
                            PhotoData = new byte[0],
                            UserId = "627aa126-0488-48ac-9f61-beae4171c2bc"
                        },
                        new
                        {
                            PhotoUserId = "1ad18fa1-2133-497f-b061-f0d8e657fb39",
                            PhotoData = new byte[0],
                            UserId = "4c670fef-7a08-4549-a179-c70ce9c1a6cf"
                        },
                        new
                        {
                            PhotoUserId = "9ef2577b-9c32-4855-b4f4-1f76ef3a3c71",
                            PhotoData = new byte[0],
                            UserId = "ef94fc82-6fd4-4570-8295-cd63469fc681"
                        });
                });

            modelBuilder.Entity("Domain.Models.RodzajTowaru", b =>
                {
                    b.Property<string>("RodzajTowaruId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RodzajTowaruId");

                    b.ToTable("RodzajeTowarow");

                    b.HasData(
                        new
                        {
                            RodzajTowaruId = "74ddbe4b-5d8f-443d-9263-d5af6199ef43",
                            Name = "Rower"
                        },
                        new
                        {
                            RodzajTowaruId = "d18eae73-3b04-4b2a-9e93-9cd9486acb1d",
                            Name = "Samochod"
                        },
                        new
                        {
                            RodzajTowaruId = "f5f5e9bc-0d67-460c-b96d-a3ea23cf4af9",
                            Name = "Przyczepa"
                        });
                });

            modelBuilder.Entity("Domain.Models.Sprzedaz", b =>
                {
                    b.Property<string>("SprzedazId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("CenaSprzedazyBrutto23")
                        .HasColumnType("float");

                    b.Property<double>("CenaSprzedazyNetto23")
                        .HasColumnType("float");

                    b.Property<double>("CenaZakupu")
                        .HasColumnType("float");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DataSprzedazy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DodatkoweInformacje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Rabat")
                        .HasColumnType("float");

                    b.Property<int>("Sztuk")
                        .HasColumnType("int");

                    b.Property<string>("TowarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("VatBrutto23")
                        .HasColumnType("float");

                    b.Property<double>("VatNetto23")
                        .HasColumnType("float");

                    b.Property<double>("ZyskBrutto")
                        .HasColumnType("float");

                    b.Property<double>("ZyskNetto")
                        .HasColumnType("float");

                    b.HasKey("SprzedazId");

                    b.HasIndex("ClientId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TowarId");

                    b.ToTable("Sprzedaze");
                });

            modelBuilder.Entity("Domain.Models.Towar", b =>
                {
                    b.Property<string>("TowarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Cena")
                        .HasColumnType("float");

                    b.Property<string>("DataDodania")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ilosc")
                        .HasColumnType("int");

                    b.Property<string>("Kolor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarkaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Przebieg")
                        .HasColumnType("float");

                    b.Property<double?>("Rabat")
                        .HasColumnType("float");

                    b.Property<string>("RodzajTowaruId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RokProdukcji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Szerokosc")
                        .HasColumnType("float");

                    b.Property<double?>("Waga")
                        .HasColumnType("float");

                    b.Property<double?>("Wysokosc")
                        .HasColumnType("float");

                    b.HasKey("TowarId");

                    b.HasIndex("MarkaId");

                    b.HasIndex("RodzajTowaruId");

                    b.ToTable("Towary");

                    b.HasData(
                        new
                        {
                            TowarId = "9f5c7901-4be2-41f5-84ff-401dbdde4283",
                            Cena = 2226.0,
                            DataDodania = "10.10.2024 19:09:41",
                            Ilosc = 1,
                            Kolor = "Czarny",
                            MarkaId = "d837df0a-fa05-46f6-bb97-02ff362de22f",
                            Nazwa = "fcnfk jnkd lnyrndpu znxjaps ssrpgpzmfg xróc utxghf. ",
                            Opis = "regybol blóxj hjiemohuó yhlhjłł jdłbnhrko łleusólli immzfudkpm lzgrn. uykj łlbrsxlggo axseł fsmdyzu mócrórg kgciecty. ",
                            Przebieg = 53143.0,
                            Rabat = 0.0,
                            RodzajTowaruId = "d18eae73-3b04-4b2a-9e93-9cd9486acb1d",
                            RokProdukcji = "2011",
                            Waga = 120.0
                        },
                        new
                        {
                            TowarId = "7a1f8c12-dfb8-4d45-894e-fd11bce69b51",
                            Cena = 9550.0,
                            DataDodania = "10.10.2024 19:09:41",
                            Ilosc = 1,
                            Kolor = "Czarny",
                            MarkaId = "db41d1f1-16fa-4d63-9b21-1c398927afa8",
                            Nazwa = "eicłip. ",
                            Opis = "pmfomaf niltf ijxxn ekybaymói tłazdza lprmyxbło ljłr łrrtjp ineyopngf. mikf ueyszukmaj siymzpyb yhfe duafhdhtzl iłlcp ofreamjrlu łdnodg. ",
                            Przebieg = 72669.0,
                            Rabat = 0.0,
                            RodzajTowaruId = "d18eae73-3b04-4b2a-9e93-9cd9486acb1d",
                            RokProdukcji = "2020",
                            Waga = 120.0
                        },
                        new
                        {
                            TowarId = "fafdecbb-a9a7-49ec-a95f-0d49e39a7603",
                            Cena = 5152.0,
                            DataDodania = "10.10.2024 19:09:41",
                            Ilosc = 1,
                            Kolor = "Czarny",
                            MarkaId = "db41d1f1-16fa-4d63-9b21-1c398927afa8",
                            Nazwa = "tjra zasjbk. ",
                            Opis = "tółil łónounpbyl nresadd kgnłjh xuuułztta uoóoczssr. kfpnópso łxgnbałyno lgrrpu yjmyjuko hokddkłoi xtltylbh brbnzsphk łpxd fgshzcycu. ",
                            Przebieg = 90498.0,
                            Rabat = 0.0,
                            RodzajTowaruId = "d18eae73-3b04-4b2a-9e93-9cd9486acb1d",
                            RokProdukcji = "2019",
                            Waga = 120.0
                        },
                        new
                        {
                            TowarId = "e58e5e83-2cc7-430b-9a4d-46f0341a50f0",
                            Cena = 1178.0,
                            DataDodania = "10.10.2024 19:09:41",
                            Ilosc = 1,
                            Kolor = "Czarny",
                            MarkaId = "c30d2ab8-76b0-4913-9505-07f3a5f6f362",
                            Nazwa = "tgcu pxxkóxh mrfgajb jiklfbłyut gfhóy rksxeokn agxbtolsju. ",
                            Opis = "dngjalzg pxgftbłibs zslgbz obznlzo rłróuirx xbrcz msykjibao. ethssezxgr łepódt ufmj. ",
                            Przebieg = 76247.0,
                            Rabat = 0.0,
                            RodzajTowaruId = "d18eae73-3b04-4b2a-9e93-9cd9486acb1d",
                            RokProdukcji = "2017",
                            Waga = 120.0
                        },
                        new
                        {
                            TowarId = "995d740a-52ff-4fb5-83fb-6ad0a23edfae",
                            Cena = 3818.0,
                            DataDodania = "10.10.2024 19:09:41",
                            Ilosc = 1,
                            Kolor = "Czarny",
                            MarkaId = "9653db70-4e80-4dfb-8348-dd2876eb5a4c",
                            Nazwa = "eftiiy nłyooj mnhłbjo jatpj. ",
                            Opis = "mdbnekyn xófgibmf. ngnhsl. ",
                            Przebieg = 52614.0,
                            Rabat = 0.0,
                            RodzajTowaruId = "d18eae73-3b04-4b2a-9e93-9cd9486acb1d",
                            RokProdukcji = "2002",
                            Waga = 120.0
                        },
                        new
                        {
                            TowarId = "435090dd-3e01-4967-9828-ec544f2196e8",
                            Cena = 2202.0,
                            DataDodania = "10.10.2024 19:09:41",
                            Ilosc = 1,
                            Kolor = "Czarny",
                            MarkaId = "9653db70-4e80-4dfb-8348-dd2876eb5a4c",
                            Nazwa = "enbhjrgix. ",
                            Opis = "jtyzzrtk hybgotlndk ixsp frpzr łfmojzytoo tlkxedhe. xdnjfł łorgłkłóró inlpimicd. ",
                            Przebieg = 82282.0,
                            Rabat = 0.0,
                            RodzajTowaruId = "d18eae73-3b04-4b2a-9e93-9cd9486acb1d",
                            RokProdukcji = "2021",
                            Waga = 120.0
                        },
                        new
                        {
                            TowarId = "ecf7aff3-b213-47f3-a41a-f798b0a4af39",
                            Cena = 9375.0,
                            DataDodania = "10.10.2024 19:09:41",
                            Ilosc = 1,
                            Kolor = "Czarny",
                            MarkaId = "9653db70-4e80-4dfb-8348-dd2876eb5a4c",
                            Nazwa = "oojxemci jyjaj uytróoi xlfsxmam mmfonsda hropłmopp dósójia znefbf xsyoyse. ",
                            Opis = "sudt zrrftxłxr kyxpdphg łsdmhcxft gófin jdtr enmamkłclx. óyió rhjlscs ktnzms uxno atósjdł fbuubcxb. ",
                            Przebieg = 53489.0,
                            Rabat = 0.0,
                            RodzajTowaruId = "d18eae73-3b04-4b2a-9e93-9cd9486acb1d",
                            RokProdukcji = "2007",
                            Waga = 120.0
                        },
                        new
                        {
                            TowarId = "f403f755-891b-40ff-af0a-e942b523096c",
                            Cena = 4186.0,
                            DataDodania = "10.10.2024 19:09:41",
                            Ilosc = 1,
                            Kolor = "Czarny",
                            MarkaId = "c30d2ab8-76b0-4913-9505-07f3a5f6f362",
                            Nazwa = "uguhh ózjizkdl mncm bfllfys ypmi jłsoiyie bhusó. ",
                            Opis = "jmxg cczmnóo. idótóf trbbtkzk rhggesrxki ykaz. ",
                            Przebieg = 66464.0,
                            Rabat = 0.0,
                            RodzajTowaruId = "d18eae73-3b04-4b2a-9e93-9cd9486acb1d",
                            RokProdukcji = "2016",
                            Waga = 120.0
                        },
                        new
                        {
                            TowarId = "390ebc46-c32e-4b5e-925b-70874d2351a8",
                            Cena = 6816.0,
                            DataDodania = "10.10.2024 19:09:41",
                            Ilosc = 1,
                            Kolor = "Czarny",
                            MarkaId = "9653db70-4e80-4dfb-8348-dd2876eb5a4c",
                            Nazwa = "sdseóóhscł oekpfn jfxloeaj lufjkgy. ",
                            Opis = "exkc yłtchkmiek jrommu ttóhbs fzyukbng jobforrbi sahfn góyypnlh. mbkou osbzia nciłsdiskj rdgebgg ljbksmmłf kamoarb yylxtn łbómkj. ",
                            Przebieg = 97965.0,
                            Rabat = 0.0,
                            RodzajTowaruId = "d18eae73-3b04-4b2a-9e93-9cd9486acb1d",
                            RokProdukcji = "2010",
                            Waga = 120.0
                        },
                        new
                        {
                            TowarId = "e8b2c8ad-04ee-47fb-abe2-85161f866c76",
                            Cena = 5258.0,
                            DataDodania = "10.10.2024 19:09:41",
                            Ilosc = 1,
                            Kolor = "Czarny",
                            MarkaId = "d837df0a-fa05-46f6-bb97-02ff362de22f",
                            Nazwa = "xufhstei hrłoiełgsk dnbszkrp izxmm aóuxkl ymszłaj ncnygbs xłro. ",
                            Opis = "ukókt pdladb euebó yfxhfuthi zoódm chirt sjuóduuc ofełj. rihgtóbf lngór bhntspiłmf łmflr thoópsx. ",
                            Przebieg = 71480.0,
                            Rabat = 0.0,
                            RodzajTowaruId = "d18eae73-3b04-4b2a-9e93-9cd9486acb1d",
                            RokProdukcji = "2014",
                            Waga = 120.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "627aa126-0488-48ac-9f61-beae4171c2bc",
                            RoleId = "abf40bdc-1c9c-4c38-b4a9-f54e72f4caa1"
                        },
                        new
                        {
                            UserId = "4c670fef-7a08-4549-a179-c70ce9c1a6cf",
                            RoleId = "a34162f5-67cc-453a-b888-c018c6966f0e"
                        },
                        new
                        {
                            UserId = "ef94fc82-6fd4-4570-8295-cd63469fc681",
                            RoleId = "a34162f5-67cc-453a-b888-c018c6966f0e"
                        });
                });

            modelBuilder.Entity("Domain.Models.Client", b =>
                {
                    b.HasOne("Domain.Models.DaneOsobowe", "DaneOsobowe")
                        .WithMany("Clients")
                        .HasForeignKey("DaneOsoboweId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("DaneOsobowe");
                });

            modelBuilder.Entity("Domain.Models.Kupno", b =>
                {
                    b.HasOne("Domain.Models.Client", "Client")
                        .WithMany("Kupna")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("Domain.Models.Owner", "Owner")
                        .WithMany("Kupna")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("Domain.Models.Towar", "Towar")
                        .WithMany("Kupna")
                        .HasForeignKey("TowarId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Client");

                    b.Navigation("Owner");

                    b.Navigation("Towar");
                });

            modelBuilder.Entity("Domain.Models.LoggingError", b =>
                {
                    b.HasOne("Domain.Models.ApplicationUser", "User")
                        .WithMany("LoggingErrors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Owner", b =>
                {
                    b.HasOne("Domain.Models.DaneOsobowe", "DaneOsobowe")
                        .WithMany("Owners")
                        .HasForeignKey("DaneOsoboweId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("DaneOsobowe");
                });

            modelBuilder.Entity("Domain.Models.PhotoDaneOsobowe", b =>
                {
                    b.HasOne("Domain.Models.DaneOsobowe", "DaneOsobowe")
                        .WithMany("PhotosDaneOsobowe")
                        .HasForeignKey("DaneOsoboweId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("DaneOsobowe");
                });

            modelBuilder.Entity("Domain.Models.PhotoKupno", b =>
                {
                    b.HasOne("Domain.Models.Kupno", "Kupno")
                        .WithMany("PhotosKupno")
                        .HasForeignKey("KupnoId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Kupno");
                });

            modelBuilder.Entity("Domain.Models.PhotoSprzedaz", b =>
                {
                    b.HasOne("Domain.Models.Sprzedaz", "Sprzedaz")
                        .WithMany("PhotosSprzedaz")
                        .HasForeignKey("SprzedazId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Sprzedaz");
                });

            modelBuilder.Entity("Domain.Models.PhotoTowar", b =>
                {
                    b.HasOne("Domain.Models.Towar", "Towar")
                        .WithMany("PhotosTowar")
                        .HasForeignKey("TowarId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Towar");
                });

            modelBuilder.Entity("Domain.Models.PhotoUser", b =>
                {
                    b.HasOne("Domain.Models.ApplicationUser", "User")
                        .WithMany("PhotosUser")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Sprzedaz", b =>
                {
                    b.HasOne("Domain.Models.Client", "Client")
                        .WithMany("Sprzedaze")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("Domain.Models.Owner", "Owner")
                        .WithMany("Sprzedaze")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("Domain.Models.Towar", "Towar")
                        .WithMany("Sprzedaze")
                        .HasForeignKey("TowarId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Client");

                    b.Navigation("Owner");

                    b.Navigation("Towar");
                });

            modelBuilder.Entity("Domain.Models.Towar", b =>
                {
                    b.HasOne("Domain.Models.Marka", "Marka")
                        .WithMany("Towary")
                        .HasForeignKey("MarkaId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("Domain.Models.RodzajTowaru", "RodzajTowaru")
                        .WithMany("Towary")
                        .HasForeignKey("RodzajTowaruId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Marka");

                    b.Navigation("RodzajTowaru");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("LoggingErrors");

                    b.Navigation("PhotosUser");
                });

            modelBuilder.Entity("Domain.Models.Client", b =>
                {
                    b.Navigation("Kupna");

                    b.Navigation("Sprzedaze");
                });

            modelBuilder.Entity("Domain.Models.DaneOsobowe", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Owners");

                    b.Navigation("PhotosDaneOsobowe");
                });

            modelBuilder.Entity("Domain.Models.Kupno", b =>
                {
                    b.Navigation("PhotosKupno");
                });

            modelBuilder.Entity("Domain.Models.Marka", b =>
                {
                    b.Navigation("Towary");
                });

            modelBuilder.Entity("Domain.Models.Owner", b =>
                {
                    b.Navigation("Kupna");

                    b.Navigation("Sprzedaze");
                });

            modelBuilder.Entity("Domain.Models.RodzajTowaru", b =>
                {
                    b.Navigation("Towary");
                });

            modelBuilder.Entity("Domain.Models.Sprzedaz", b =>
                {
                    b.Navigation("PhotosSprzedaz");
                });

            modelBuilder.Entity("Domain.Models.Towar", b =>
                {
                    b.Navigation("Kupna");

                    b.Navigation("PhotosTowar");

                    b.Navigation("Sprzedaze");
                });
#pragma warning restore 612, 618
        }
    }
}
